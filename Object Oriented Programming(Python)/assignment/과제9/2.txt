class StudentGradeSystem(object):
    def __init__(self, filename):
        self.filename = filename
        self.student_list = []
        
        self.total_avg = 0
        self.kor_avg = 0
        self.eng_avg = 0
        self.math_avg = 0
        
        self.kor_max = 0
        self.eng_max = 0
        self.math_max = 0
        self.kor_max_list = []
        self.eng_max_list = []
        self.math_max_list = []
        
    def register_student(self):
        with open(self.filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        for line in lines:
            info = (line.strip()).split(",")
            num, name, kor, eng, math = [x.split()[1] for x in info]
            kor = int(kor)
            eng = int(eng)
            math = int(math)
                
            student = Student(num, name, kor, eng, math)
            self.student_list.append(student)
        
    def cal_order(self):
        order_list = sorted(self.student_list, key = lambda st:st.total, reverse = True)
        order = 0
        temp = 0
        
        for student in order_list:
            if temp == student.total: # 동점 처리
                student.order = order
            else: # 그외
                temp = student.total
                order += 1
                student.order = order        
        
        self.student_list = order_list
        
        
    def cal_total_avg(self):
        for student in self.student_list:
            self.total_avg += student.total
        self.total_avg /= len(self.student_list)

    def cal_kor_avg(self):
        for student in self.student_list:
            self.kor_avg += student.kor
        self.kor_avg /= len(self.student_list)

    def cal_eng_avg(self):
        for student in self.student_list:
            self.eng_avg += student.eng
        self.eng_avg /= len(self.student_list)
        
    def cal_math_avg(self):
        for student in self.student_list:
            self.math_avg += student.math
        self.math_avg /= len(self.student_list)
        
    def cal_kor_max(self):
        self.kor_max = max(self.student_list, key = lambda student:student.kor).kor
        
        for student in self.student_list:
            if student.kor == self.kor_max:
                self.kor_max_list.append(student.name)

    def cal_eng_max(self):
        self.eng_max = max(self.student_list, key = lambda student:student.eng).eng
        
        for student in self.student_list:
            if student.eng == self.eng_max:
                self.eng_max_list.append(student.name)

    def cal_math_max(self):
        self.math_max = max(self.student_list, key = lambda student:student.math).math
        
        for student in self.student_list:
            if student.math == self.math_max:
                self.math_max_list.append(student.name)
        
    def process(self):
        self.cal_order()
        self.cal_total_avg()
        self.cal_kor_avg()
        self.cal_eng_avg()
        self.cal_math_avg()
        self.cal_kor_max()
        self.cal_eng_max()
        self.cal_math_max()
        
    def print_students(self):
        for st in self.student_list:
            print(f"번호: {st.num}, 이름: {st.name}, 국어: {st.kor}, 영어: {st.eng}, 수학: {st.math}, 총점: {st.total}, 평균: {st.avg:.2f}, 등수: {st.order}")
        print()
        
    def print_class_information(self):
        print("총점 반평균: {:.2f}".format(self.total_avg))
        print("국어 반평균: {:.2f}".format(self.kor_avg))
        print("영어 반평균: {:.2f}".format(self.eng_avg))
        print("수학 반평균: {:.2f}".format(self.math_avg))
        print()
        print("각 과목의 최고점과 명단")
        print(f"국어의 최고점 {int(self.kor_max)}, ", end="")
        for st in self.kor_max_list:
            print(st, end=" ")
        print()
        print(f"영어의 최고점 {int(self.eng_max)}, ", end="")
        for st in self.eng_max_list:
            print(st, end=" ")
        print()
        print(f"수학의 최고점 {int(self.math_max)}, ", end="")
        for st in self.math_max_list:
            print(st, end=" ")
        print()
    
    @checkTime
    def checktime(self):
        self.register_student()
        self.process()
        self.print_students()
        self.print_class_information()